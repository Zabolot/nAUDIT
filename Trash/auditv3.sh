#!/bin/bash
# audit.sh - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç Python –ø—Ä–æ–µ–∫—Ç–∞

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OUTPUT_DIR="audit_results"
REPORTS_DIR="$OUTPUT_DIR/reports"
VENV_DIR=".audit_venv"
CONFIG_DIR="$OUTPUT_DIR/configs"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
init_environment() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏—Ç–∞"
    mkdir -p {$REPORTS_DIR,$CONFIG_DIR}
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è venv
    python3 -m venv $VENV_DIR
    source $VENV_DIR/bin/activate
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    pip install -U pip wheel > /dev/null 2>&1
    pip install -r requirements.txt > $REPORTS_DIR/dependencies_install.log 2>&1
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    pip install pylint mypy bandit safety coverage pipdeptree radon \
        inspect4py pytest pydantic sqlalchemy > $REPORTS_DIR/tools_install.log 2>&1
}

check_migrations() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π
    alembic history > $REPORTS_DIR/migration_history.log 2>&1 || echo "–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π" >> $REPORTS_DIR/db_issues.log
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã
    alembic check > $REPORTS_DIR/schema_consistency.log 2>&1 || echo "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ö–µ–º—ã" >> $REPORTS_DIR/db_issues.log
    
    # –ê–Ω–∞–ª–∏–∑ SQL-—Å–∫—Ä–∏–ø—Ç–æ–≤
    if command -v sqlfluff >/dev/null; then
        sqlfluff lint bot/db/ --format json > $REPORTS_DIR/sql_analysis.json
    fi
}

# –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏
print_summary() {
    echo
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ê–£–î–ò–¢–ê‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
    errors=$(grep -criE 'ERROR|FAILED' $REPORTS_DIR)
    warnings=$(grep -cri 'WARNING' $REPORTS_DIR)
    security_issues=$(jq '.results | length' $REPORTS_DIR/security_issues.json)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–¥–∞
    loc=$(radon raw bot -s | awk '/Total lines/ {print $3}')
    complexity=$(radon cc bot -a | grep -c ' M ')
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    echo -e "\nüìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:"
    echo "‚Ä¢ –û–±—ä–µ–º –∫–æ–¥–∞: $loc —Å—Ç—Ä–æ–∫"
    echo "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ $complexity –º–µ—Ç–æ–¥–∞—Ö"
    
    echo -e "\nüö® –ü—Ä–æ–±–ª–µ–º—ã:"
    echo "‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: $errors"
    echo "‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $warnings"
    echo "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: $security_issues"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    echo -e "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    grep -hri 'suggestion:' $REPORTS_DIR | head -3
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
main() {
    init_environment
    
    run_code_analysis
    run_security_checks
    run_test_analysis
    check_configs
    run_external_services
    generate_report
    
    deactivate
    
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: $OUTPUT_DIR"
    print_summary
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --db) check_migrations ;;
        --security) run_security_checks; exit 0 ;;
        *) echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"; exit 1 ;;
    esac
    shift
done

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
main